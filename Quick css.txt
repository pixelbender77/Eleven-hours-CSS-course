rem : root element
 saying 2 rem will imply saying 2 times the size of it's root. the root here is according
 to html tree hierachy and stuff. for instance header is the root of p. But if 2 rem is given
 to the p tag without specifying header styling, it will fetch the browser's font size instead

em: element 
 equivalent to the font size of the direct current element

- % is a better choice for horizontal size setting

- setting body size to full screen and not just content min-height: 100vh.

- box-sizing: border box really helps calculate exactly the size we're assigning 
  to elements: as it includes border, padding and content (not margin) into the assigned
  width or height. on the other border-content will set only the content of elements 
  to the assigned size (excluding padding and border)

- TOP RIGHT BOTTOM LEFT
- Inherit; is very usefull as it makes child elements have parent properties. normally
  children do not have direct access to parent properties until parents give them access to 
  it
- We can't apply margin to inline elements but to block elements rather
- Inline-block is a hybrid as it makes the styled element remain inline(not going to a new line)
  and padding and margin can be applied to it normally. Used for buttons and clickables very often
- display: none can be used to logically remove an element from rendering
- a nice place to use px instead of rem is when defining border radius

 [ Flex-box ]

- All elements default to static
- setting an element's position to relative makes it an ancestor for indented elements
- sticky block sticks to a container or any defined element
- fixed is fixed, absolute 
- html{scroll-behavior: smooth} hahah

- align-content defines the distance between lines(rows) while align-item define how
  the items as a whole are aligned within a container. align-content therefore has no
  effect when there's only one line.
- setting the display type of an element to flex indeed is making it look kind of like normal
  elements in flutter. space-around, space-between, mainAxisAlignment(flex-direction) and stuff
- Flex flow column means that the elements in the flex box will align in a column.
- flex flow row means that the elements will align in a row


 [ CSS Grid ]

- display: grid
- check where to and where not to put commas ','  !!
- fraction units used specifically for css grid. 'fr'
- Do not! comment with ' // ' in css. never! comment with /* */ instead. okay? Good!
- align-content aligns grid items vertically
- justify-content aligns grid items horizontally

- Mmm learned about aside elements used for things like side bars, ads, related posts/links , 
  promotional content and that kind of stuff

- grid auto rows specifies the height of rows in a grid

-grid column start and end are used to define were columns grid elements start and end
- you could also set thier values to negative 
- grid-column and grid-row could be used as shortcuts . (instead of grid-row-start 1 grid-row-end 2 --> grid-row: 1/2)
- grid-auto-rows: minmax(150px, auto). row will have minimum height of 150px and will Grow with the content


[CSS Images]

- images are inline elements
- can make them block elements by changing thier display property to block. It also removes
  space under the image. ( Inline elements have space underneath by default.)

- always use an image that is twice as big as where you're planning to display


[Media Queries]
- Mobile first designs. It's easier to design mobile or small version first and then expand
  it to the size we want
- md file -> Markdown file
- iPhone 5/SE one of the smallest mobile devices.. mmm
- Shift+Alt+downArrow : past down
- Selection and Ctrl+D to select following item for edit in VS Code
- Wow one of the funniest mess. Do not indent media queries!!! one at a time and close it's 
  bracket. wow.
- scroll-margin top not Scroll-padding-top. Make sure you do not use the word padding instead
  margin and vice versa. üò≠üò≠

- haven't suffered from this one yet but notice .element =! element in styling.
- It's like it's preferable to have the small media query element at the end of the file.. just check
- Cascading Style Sheets. Never forget! the last is always gonna be prefered. With Specificity! :-)
- You can factorise out elements using the :is().

  [ Pseudo Classes ] 
 -> classes
- a:any-link() selects both the link and the visited pseudo class
- could use :is to list element to be selected.. but it's week

- Another dangerous pseudo class is the :where pseudo class. It has specificity of (0,0,0). wtf
- :target to style the last target element. (last selected, clicked, this kind of stuff)

- :nth-child() selector takes it's reference from the order in the html file and not the
  css file. it means that if you reordered the elements with css you'll have to refer back
  to the order in the html file to selected the element	

- you could say child or OBJECT. hahaha so reading this .card:nth-child(1) it'll give
  the first object or instance of the .card class. hahaha
 -> elements


  [ Functions ]

- while using the min function always put on one side an absolute value and on the other
  side a value that will change with the size of the page. If you put two absolute values
  (which are constants) css will always select that smallest one.. and so no need even using
  the min() function. 
  min ([limit(absolute Qty)], [varying(relative Qty)].
  It is better to choose vh for fonts that vw.

  - min and max difference -
  With the min function, the first value(absolute) is the Maximum it'll ever get.
  With the max function, the first value(absolute) is the Minimum it'll ever get.

  In other words, the first parameter of each function defines the opposite of it's
  function name.

- The Clamp function closes the debate. 
  clamp ( min(absolute) , ideal(relative), max(absolute) );

- Actually you could play around with functions.. for hover focus and stuff, set the
  filter property to brightness, hue-rotate, blur.. etc


  [ Animations ]

- Animations are the coolest things in CSS haha.
- animation-delay: 1s; <--Is Correct but 1 s; <-- In NOT correct
- for element display like text and stuff.. better choose ease-out as animation timing function
- At times we set the display property of elements just because we wanna easisly position some element in them. Yeah that's what it's all about

- Dude!! .nav != nav  Be  { Carefull!!! }

 
  [ Organisation ]

- Comment style headers. Use comments on headings
- Sort properties alphabetically
- Follow naming convention. This is one

  BEM convention: Block Element Modifier

  = Block: It could be a button, and image, a side bar etc..  An entity or anything that kind of stands on it's own
    (.navbar , .sidebar)

  = Modifier: It is an increment of a block , as the name says.. "Modifier". It actually modifies blocks.
    (.btn--primary , image--blurred, btn--lean). Notice the double hyphens between the words4

  = Element: As the name says, this kind of entities are 'part-of' , 'belong-to' 'are unique-to' . Making an entity element implies
    that it it's type is unique to it's parent. e.g (.navbar__link, .profile__caption) . In the
    first example it means that the style applied to that link is just for navbar links. samething for the second example,
    the caption is just for profiles
    The syntans is  .[block]__[element] . 
    On the other hand something like ".header__navbar__link " is not correct. You just need to call the block and not first calling
    all the elements under which the current element is nested. (never for underscores in a nameü§î)
    In order words it doesn't represent structure!

- Also note that despite all the above, selecting an element like this : ".header button"(two classes) will definitely  have more specificity than selecting it like this: ".header__button" (just a class name). So yeah take note.

- Almost there and now the computer is disturbing üòí


   [ FINAL PROJECT ]

- Ctrl space bar to call emmet abbreviation
- The meta tag <meta http-equiv="X-UA-Compatible" content="IE-edge"> Is deprecated!
  Unless you want your webpage to be supported by internet explorer which has been discontinued.

- On the other hand <meta name="viewport" content="width=device-width, initial-scale=1.0"> is a must
  use if you want to make your website responsive.

- The section after the header , generally with image, video or slider is called HERO section.
- Mmm looks like em is used for smaller stuff and rem for bigger
- Use focus-visible instead of just focus.  
  The difference is that with focus, control may remain on the selected element meanwhile
  with focus-visible after it's used it'll change

- Missing a semi colon after a style property cancels it lol. pff

- Dude the seconds stuff when you are dealing with animations!!! don't forget
 üò´üò´üôèüèΩ
- Also, the BEM convention also says the order in which you should place your styles.
  ie for say your navbar you'll place the .nav, then the .nav__elements and finally the .nav__elements--[modifierProps]

- Wanna know or see if you can use an element or know the number of browser that support it, go to caniuse.com
- You could convert table to grid by setting it's display property to contents like here: "display: contents".

-

 

     = Building the website = 

-  Omitting the media type can be usefull when you really want to
   apply styles accross all devices.
- overflow: hidden to hide overflows

- At times the browser's inspect property alters styling. so when possible resize the browser window instead
- Ha could you imagine a :hover is wrong?üòí stupid css. instead a:hover is correct. anyways lets move forward
- mmm CSS Scan, interesting 
- align-self overrides the parent alignment. Very usefull property

- full page display doesn't function when you enter inspection mode directly in a device.
- Its just better at times to use the transform: scale() to resize during responsiveness than
  using values

- Did you know that missing a semicolon before a styling line cancels that line?
- font-family: Arial Rounded MT, Helvetica, sans-serif;
- Next time you copy page to fill another one, make sure you bring everything along. (CSS, JS etc..)

- You CAN NOT! manipulate svg colors with fill: and stroke: 
  instead

- Justify-content is like 'main-axis alignment' and align-item is like 'cross-axis alignment'

- Don't forget to always add the defer attribute to the script tag while injecting your html

- Background intelligent transfer disable







Lyne - Jimmy
Claude
Kissly