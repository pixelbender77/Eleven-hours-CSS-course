rem : root element
 saying 2 rem will imply saying 2 times the size of it's root. the root here is according
 to html tree hierachy and stuff. for instance header is the root of p. But if 2 rem is given
 to the p tag without specifying header styling, it will fetch the browser's font size instead

em: element 
 equivalent to the font size of the direct current element

- % is a better choice for horizontal size setting

- setting body size to full screen and not just content min-height: 100vh.

- box-sizing: border box really helps calculate exactly the size we're assigning 
  to elements: as it includes border, padding and content (not margin) into the assigned
  width or height. on the other border-content will set only the content of elements 
  to the assigned size (excluding padding and border)

- TOP RIGHT BOTTOM LEFT
- Inherit; is very usefull as it makes child elements have parent properties. normally
  children do not have direct access to parent properties until parents give them access to 
  it
- We can't apply margin to inline elements but to block elements rather
- Inline-block is a hybrid as it makes the styled element remain inline(not going to a new line)
  and padding and margin can be applied to it normally. Used for buttons and clickables very often
- display: none can be used to logically remove an element from rendering
- a nice place to use px instead of rem is when defining border radius

 [ Flex-box ]

- All elements default to static
- setting an element's position to relative makes it an ancestor for indented elements
- sticky block sticks to a container or any defined element
- fixed is fixed, absolute 
- html{scroll-behavior: smooth} hahah

- align-content defines the distance between lines(rows) while align-item define how
  the items as a whole are aligned within a container. align-content therefore has no
  effect when there's only one line.
- setting the display type of an element to flex indeed is making it look kind of like normal
  elements in flutter. space-around, space-between, mainAxisAlignment(flex-direction) and stuff



 [ CSS Grid ]

- display: grid
- check where to and where not to put commas ','  !!
- fraction units used specifically for css grid. 'fr'
- Do not! comment with ' // ' in css. never! comment with /* */ instead. okay? Good!
- align-content aligns grid items vertically
- justify-content aligns grid items horizontally

- Mmm learned about aside elements used for things like side bars, ads, related posts/links , 
  promotional content and that kind of stuff

- grid auto rows specifies the height of rows in a grid

-grid column start and end are used to define were columns grid elements start and end
- you could also set thier values to negative 
- grid-column and grid-row could be used as shortcuts . (instead of grid-row-start 1 grid-row-end 2 --> grid-row: 1/2)
- grid-auto-rows: minmax(150px, auto). row will have minimum height of 150px and will Grow with the content


[CSS Images]

- images are inline elements
- can make them block elements by changing thier display property to block. It also removes
  space under the image. ( Inline elements have space underneath by default.)

- always use an image that is twice as big as where you're planning to display


[Media Queries]
- Mobile first designs. It's easier to design mobile or small version first and then expand
  it to the size we want
- md file -> Markdown file
- iPhone 5/SE one of the smallest mobile devices.. mmm
- Shift+Alt+downArrow : past down
- Selection and Ctrl+D to select following item for edit in VS Code
- Wow one of the funniest mess. Do not indent media queries!!! one at a time and close it's 
  bracket. wow.
- scroll-margin top not Scroll-padding-top. Make sure you do not use the word padding instead
  margin and vice versa. ðŸ˜­ðŸ˜­

- haven't suffered from this one yet but notice .element =! element in styling.
- It's like it's preferable to have the small media query element at the end of the file.. just check
- Cascading Style Sheets. Never forget! the last is always gonna be prefered. With Specificity! :-)
- You can factorise out elements using the :is().

  [ Pseudo Classes ] 
 -> classes
- a:any-link{} selects both the link and the visited pseudo class
- could use :is to list element to be selected.. but it's week

- Another dangerous pseudo class is the :where pseudo class. It has specificity of (0,0,0). wtf
- :target to style the last target element. (last selected, clicked, this kind of stuff)

- :nth-child() selector takes it's reference from the order in the html file and not the
  css file. it means that if you reordered the elements with css you'll have to refer back
  to the order in the html file to selected the element	

- you could say child or OBJECT. hahaha so reading this .card:nth-child(1) it'll give
  the first object or instance of the .card class. hahaha
 -> elements
- 





Claude